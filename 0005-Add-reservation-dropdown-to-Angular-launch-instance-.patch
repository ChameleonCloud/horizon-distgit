From 94b66a364ec3064edb72f19e08c0ea55ee009756 Mon Sep 17 00:00:00 2001
From: Nick Timkovich <npt@uchicago.edu>
Date: Mon, 9 Oct 2017 14:35:41 -0500
Subject: [PATCH 05/29] Add reservation dropdown to Angular launch-instance
 form

---
 openstack_dashboard/api/rest/__init__.py           |  1 +
 openstack_dashboard/api/rest/blazar.py             | 37 ++++++++++++++++
 .../workflow/launch-instance/details/details.html  | 16 +++++++
 .../launch-instance-model.service.js               | 37 ++++++++++++++++
 .../core/openstack-service-api/blazar.service.js   | 50 ++++++++++++++++++++++
 5 files changed, 141 insertions(+)
 create mode 100644 openstack_dashboard/api/rest/blazar.py
 create mode 100644 openstack_dashboard/static/app/core/openstack-service-api/blazar.service.js

diff --git a/openstack_dashboard/api/rest/__init__.py b/openstack_dashboard/api/rest/__init__.py
index 9e4979c..340c59d 100644
--- a/openstack_dashboard/api/rest/__init__.py
+++ b/openstack_dashboard/api/rest/__init__.py
@@ -22,6 +22,7 @@ in https://wiki.openstack.org/wiki/APIChangeGuidelines.
 """
 
 # import REST API modules here
+from . import blazar       # noqa
 from . import cinder       # noqa
 from . import config       # noqa
 from . import glance       # noqa
diff --git a/openstack_dashboard/api/rest/blazar.py b/openstack_dashboard/api/rest/blazar.py
new file mode 100644
index 0000000..cf9ad14
--- /dev/null
+++ b/openstack_dashboard/api/rest/blazar.py
@@ -0,0 +1,37 @@
+from django.views import generic
+
+from openstack_dashboard import api
+from openstack_dashboard.api.rest import urls
+from openstack_dashboard.api.rest import utils as rest_utils
+
+from blazar_dashboard.api.client import lease_list
+
+
+@urls.register
+class Reservations(generic.View):
+    """Mini-API for Blazar (things Nova needs to know)
+    """
+    url_regex = r'blazar/reservations/$'
+
+    @rest_utils.ajax()
+    def get(self, request):
+        """List active physical-host reservations.
+        """
+        if api.base.is_service_enabled(request, 'reservation'):
+            leases = lease_list(request)
+            reservations = []
+            for lease in leases:
+                lease = lease.to_dict()
+                lease_reservations = [
+                    r
+                    for r
+                    in lease['reservations']
+                    if (r['status'] == 'active'
+                        and r['resource_type'] == 'physical:host')
+                ]
+                for r in lease_reservations:
+                    r['lease_name'] = lease['name']
+                reservations.extend(lease_reservations)
+            return {'reservations': reservations}
+        else:
+            raise rest_utils.AjaxError(501, '')
diff --git a/openstack_dashboard/dashboards/project/static/dashboard/project/workflow/launch-instance/details/details.html b/openstack_dashboard/dashboards/project/static/dashboard/project/workflow/launch-instance/details/details.html
index 6740b67..288e43a 100644
--- a/openstack_dashboard/dashboards/project/static/dashboard/project/workflow/launch-instance/details/details.html
+++ b/openstack_dashboard/dashboards/project/static/dashboard/project/workflow/launch-instance/details/details.html
@@ -32,6 +32,22 @@
         </select>
       </div>
 
+      <div class="form-group">
+        <label class="control-label" for="reservation">
+          <translate>Reservation</translate>
+          <span class="hz-icon-required fa fa-asterisk"></span>
+        </label>
+        <div class="alert alert-danger"
+             ng-if="model.reservations.length === 0"
+             translate>There are no active reservations.</div>
+        <select ng-if="model.reservations.length !== 0"
+                class="form-control"
+                id="reservation"
+                ng-options="reserv.value as reserv.label for reserv in model.reservations"
+                ng-model="model.newInstanceSpec.reservation">
+        </select>
+      </div>
+
       <div class="form-group" ng-class="{ 'has-error': launchInstanceDetailsForm.count.$invalid }">
         <label class="control-label" for="instance-count">
           <translate>Count</translate>
diff --git a/openstack_dashboard/dashboards/project/static/dashboard/project/workflow/launch-instance/launch-instance-model.service.js b/openstack_dashboard/dashboards/project/static/dashboard/project/workflow/launch-instance/launch-instance-model.service.js
index f76ea5b..41ac6c9 100644
--- a/openstack_dashboard/dashboards/project/static/dashboard/project/workflow/launch-instance/launch-instance-model.service.js
+++ b/openstack_dashboard/dashboards/project/static/dashboard/project/workflow/launch-instance/launch-instance-model.service.js
@@ -33,6 +33,7 @@
   launchInstanceModel.$inject = [
     '$q',
     '$log',
+    'horizon.app.core.openstack-service-api.blazar',
     'horizon.app.core.openstack-service-api.cinder',
     'horizon.app.core.openstack-service-api.glance',
     'horizon.app.core.openstack-service-api.neutron',
@@ -77,6 +78,7 @@
   function launchInstanceModel(
     $q,
     $log,
+    blazarAPI,
     cinderAPI,
     glanceAPI,
     neutronAPI,
@@ -133,6 +135,7 @@
        */
 
       availabilityZones: [],
+      reservations: [],
       flavors: [],
       allowedBootSources: [],
       images: [],
@@ -238,6 +241,7 @@
 
         promise = $q.all([
           novaAPI.getAvailabilityZones().then(onGetAvailabilityZones, noop),
+          blazarAPI.reservations().then(onGetReservations, noop),
           novaAPI.getFlavors({
             is_public: true,
             get_extras: true
@@ -309,6 +313,8 @@
       setFinalSpecSchedulerHints(finalSpec);
       setFinalSpecMetadata(finalSpec);
 
+      setFinalSpecReservation(finalSpec);
+
       return novaAPI.createServer(finalSpec).then(successMessage);
     }
 
@@ -357,6 +363,37 @@
 
     }
 
+    function onGetReservations(data) {
+      model.reservations.length = 0; // ?
+      push.apply(
+        model.reservations,
+        data.data.reservations
+        // .filter(function (reserv) {
+        //   return zone.zoneState && zone.zoneState.available;
+        // })
+        .map(function (reserv) {
+          return {
+            label: reserv.lease_name + " (" + reserv.id + ")",
+            value: reserv.id,
+          };
+        })
+      );
+
+      if (model.reservations.length < 1) {
+        // TODO: refuse to create instances/display warning
+      } else {
+        // force selection of the first one to remove the empty selection
+        model.newInstanceSpec.reservation = model.reservations[0].value;
+      }
+    }
+
+    // django form handler doesn't look at scheduler hints, but the api handler
+    // (openstack_dashboard/api/rest/nova.py#Servers.post) does
+    function setFinalSpecReservation(finalSpec) {
+      finalSpec.scheduler_hints['reservation'] = finalSpec['reservation'];
+      delete finalSpec['reservation'];
+    }
+
     // Flavors
 
     function onGetFlavors(data) {
diff --git a/openstack_dashboard/static/app/core/openstack-service-api/blazar.service.js b/openstack_dashboard/static/app/core/openstack-service-api/blazar.service.js
new file mode 100644
index 0000000..455b0b0
--- /dev/null
+++ b/openstack_dashboard/static/app/core/openstack-service-api/blazar.service.js
@@ -0,0 +1,50 @@
+(function () {
+  'use strict';
+
+  angular
+    .module('horizon.app.core.openstack-service-api')
+    .factory('horizon.app.core.openstack-service-api.blazar', blazarAPI);
+
+  blazarAPI.$inject = [
+    'horizon.framework.util.http.service',
+    'horizon.framework.widgets.toast.service'
+  ];
+
+  /**
+   * @ngdoc service
+   * @name blazarAPI
+   * @param {Object} apiService
+   * @param {Object} toastService
+   * @description Provides direct pass through to Blazar
+   * @returns {Object} The service
+   */
+  function blazarAPI(apiService, toastService) {
+    var service = {
+      reservations: reservations,
+    };
+
+    return service;
+
+    /**
+     * @name reservations
+     * @description
+     * Get active reservations.
+     *
+     * @param {string} params
+     * - xxxx
+     * Undefined.
+     *
+     * @param {boolean} suppressError
+     * If passed in, this will not show the default error handling
+     * (horizon alert).
+     * @returns {Object} The result of the API call
+     */
+    function reservations(params, suppressError) {
+      var promise = apiService.get('/api/blazar/reservations/', params);
+      return suppressError ? promise : promise.error(function() {
+        toastService.add('error', gettext('Unable to get active reservations.'));
+      });
+    }
+  }
+
+}());
-- 
1.8.3.1

