From 699c351468b141a467b3e6ec7b3accbe2bdd389d Mon Sep 17 00:00:00 2001
From: Alex Rocha <rochaa@tacc.utexas.edu>
Date: Wed, 27 Jun 2018 17:45:58 -0500
Subject: [PATCH 18/25] Adding chameleon icon to images when they are
 officially supported by the project, adding a link out to the appliance
 catalog for images that are shared publicly on the cc portal appliance
 catalog.

---
 .../framework/widgets/table/hz-dynamic-table.html  |   7 +-
 openstack_dashboard/api/glance.py                  |  55 ++++++++++-
 .../app/core/images/actions/actions.module.js      |  17 +++-
 .../actions/link-to-appliance-catalog.service.js   | 106 +++++++++++++++++++++
 .../app/core/images/actions/share-image.service.js |   2 +
 .../static/app/core/images/images.module.js        |  17 ++++
 6 files changed, 196 insertions(+), 8 deletions(-)
 create mode 100644 openstack_dashboard/static/app/core/images/actions/link-to-appliance-catalog.service.js

diff --git a/horizon/static/framework/widgets/table/hz-dynamic-table.html b/horizon/static/framework/widgets/table/hz-dynamic-table.html
index 40d9c5f..8a7e451 100644
--- a/horizon/static/framework/widgets/table/hz-dynamic-table.html
+++ b/horizon/static/framework/widgets/table/hz-dynamic-table.html
@@ -71,11 +71,12 @@
               <label for="{$ item[config.trackId] $}"></label>
             </div>
           </td>
-          <td ng-show="config.expand" class="expander">
-            <span class="fa fa-chevron-right"
+          <td style="width: 4em;max-width: 5em;" ng-show="config.expand" class="expander">
+            <img title="Chameleon Supported Appliance" style="float:right;" ng-if="item.project_supported" height="20px" src="https://www.chameleoncloud.org/static/images/logo-small.png" />
+            <div class="fa fa-chevron-right"
               hz-expand-detail
               duration="200">
-            </span>
+          </div>
           </td>
           <td ng-repeat="column in config.columns"
             class="rsp-p{$ column.priority $}"
diff --git a/openstack_dashboard/api/glance.py b/openstack_dashboard/api/glance.py
index 3c6c5bb..5d28779 100644
--- a/openstack_dashboard/api/glance.py
+++ b/openstack_dashboard/api/glance.py
@@ -23,6 +23,8 @@ import itertools
 import json
 import logging
 import os
+import urllib3
+from django.core.cache import cache
 
 from django.conf import settings
 from django.core.files.uploadedfile import InMemoryUploadedFile
@@ -61,7 +63,7 @@ class Image(base.APIResourceWrapper):
     _attrs = {"architecture", "container_format", "disk_format", "created_at",
               "owner", "size", "id", "status", "updated_at", "checksum",
               "visibility", "name", "is_public", "protected", "min_disk",
-              "min_ram"}
+              "min_ram", "project_supported"}
     _ext_attrs = {"file", "locations", "schema", "tags", "virtual_size",
                   "kernel_id", "ramdisk_id", "image_url"}
 
@@ -86,6 +88,24 @@ class Image(base.APIResourceWrapper):
         return getattr(self._apiresource, 'name', None)
 
     @property
+    def project_supported(self):
+        if(cache.get('app_data_is_fresh') is not True):
+            self.refresh_project_supported_cache()
+        app = cache.get(self.id)
+        if app is None:
+            return False
+        return True if app['project_supported'] == True else False
+
+    @property
+    def appliance_catalog_id(self):
+        if(cache.get('app_data_is_fresh') is not True):
+            self.refresh_project_supported_cache()
+        app = cache.get(self.id)
+        if app is None:
+            return -1
+        return app['id']
+
+    @property
     def size(self):
         image_size = getattr(self._apiresource, 'size', 0)
         if image_size is None:
@@ -118,6 +138,8 @@ class Image(base.APIResourceWrapper):
             return self._apiresource.to_dict()
         image_dict = super(Image, self).to_dict()
         image_dict['is_public'] = self.is_public
+        image_dict['project_supported'] = self.project_supported
+        image_dict['appliance_catalog_id'] = self.appliance_catalog_id
         image_dict['properties'] = {
             k: self._apiresource[k] for k in self._apiresource
             if self.property_visible(k, show_ext_attrs=show_ext_attrs)}
@@ -129,6 +151,37 @@ class Image(base.APIResourceWrapper):
     def __ne__(self, other_image):
         return not self.__eq__(other_image)
 
+    ## kicks off a cache refresh if one isn't already in progress
+    def refresh_project_supported_cache(self):
+        refresh_in_progress = cache.get('refresh_in_progress')
+        # Use existing data while refresh is in progress
+        # If this is the first time here and there is no cached data, refresh_in_progress will be None, 
+        # and the first request will go ahead and fetch & cache the data
+        if (refresh_in_progress == True): 
+            return
+        ## otherwise let's set refresh_in_progress to True and start the refresh
+        LOG.warn('Refreshing appliance catalog cache')
+        cache.set('refresh_in_progress', True, 30)
+        app_json = json.loads(self.fetch_supported_appliances())
+        for app in app_json['result']:
+            if(app['chi_uc_appliance_id'] is not None):
+                LOG.warn('caching: ' + app['chi_uc_appliance_id'] + str(app['project_supported']))
+                cache.set(app['chi_uc_appliance_id'], app, None)
+            if(app['chi_tacc_appliance_id'] is not None):
+                LOG.warn('caching: ' + app['chi_tacc_appliance_id'] + ' set to project_supported: ' + str(app['project_supported']))
+                cache.set(app['chi_tacc_appliance_id'], app, None)
+            if(app['kvm_tacc_appliance_id'] is not None):
+                LOG.warn('caching: ' + app['kvm_tacc_appliance_id'] + ' set to project_supported: ' + str(app['project_supported']))
+                cache.set(app['kvm_tacc_appliance_id'], app, None)
+        cache.set('refresh_in_progress', False, None)
+        cache.set('app_data_is_fresh', True, 300)
+
+    def fetch_supported_appliances(self):
+        LOG.warn('*******####### Fetching and caching Appliance JSON from https://dev.chameleon.tacc.utexas.edu/appliances/api/appliances/')
+        http = urllib3.PoolManager()
+        r = http.request('GET', 'https://dev.chameleon.tacc.utexas.edu/appliances/api/appliances/')
+        LOG.debug('fetched appliance catalog data: ' + r.data)
+        return r.data
 
 @memoized
 def glanceclient(request, version=None):
diff --git a/openstack_dashboard/static/app/core/images/actions/actions.module.js b/openstack_dashboard/static/app/core/images/actions/actions.module.js
index 4e0312a..51551b3 100644
--- a/openstack_dashboard/static/app/core/images/actions/actions.module.js
+++ b/openstack_dashboard/static/app/core/images/actions/actions.module.js
@@ -38,8 +38,9 @@
     'horizon.app.core.images.actions.delete-image.service',
     'horizon.app.core.images.actions.launch-instance.service',
     'horizon.app.core.images.actions.update-metadata.service',
-    'horizon.app.core.images.resourceType',
-    'horizon.app.core.images.actions.share-image.service'
+    'horizon.app.core.images.resourceType',/**
+    'horizon.app.core.images.actions.share-image.service', */
+    'horizon.app.core.images.actions.link-to-appliance-catalog.service'
   ];
 
   function registerImageActions(
@@ -51,7 +52,8 @@
     launchInstanceService,
     updateMetadataService,
     imageResourceTypeCode,
-    shareImageService
+    /** shareImageService, **/
+    linkToApplianceCatalogService
   ) {
     var imageResourceType = registry.getResourceType(imageResourceTypeCode);
     imageResourceType.itemActions
@@ -90,13 +92,20 @@
           text: gettext('Delete Image'),
           type: 'delete'
         }
-      })
+      })/**
       .append({
         id: 'shareImageService',
         service: shareImageService,
         template: {
           text: gettext('Share')
         }
+      }) */
+      .append({
+        id: 'linkToApplianceCatalogService',
+        service: linkToApplianceCatalogService,
+        template: {
+          text: gettext('Details')
+        }
       });
 
     imageResourceType.globalActions
diff --git a/openstack_dashboard/static/app/core/images/actions/link-to-appliance-catalog.service.js b/openstack_dashboard/static/app/core/images/actions/link-to-appliance-catalog.service.js
new file mode 100644
index 0000000..ed36183
--- /dev/null
+++ b/openstack_dashboard/static/app/core/images/actions/link-to-appliance-catalog.service.js
@@ -0,0 +1,106 @@
+/**
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may
+ * not use self file except in compliance with the License. You may obtain
+ * a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations
+ * under the License.
+ */
+
+(function() {
+    'use strict';
+  
+    angular
+      .module('horizon.app.core.images')
+      .factory('horizon.app.core.images.actions.link-to-appliance-catalog.service', linkToApplianceCatalogService);
+  
+    linkToApplianceCatalogService.$inject = [
+      '$q',
+      'horizon.app.core.openstack-service-api.glance',
+      'horizon.app.core.openstack-service-api.userSession',
+      'horizon.app.core.images.non_bootable_image_types',
+      'horizon.dashboard.project.workflow.launch-instance.modal.service',
+      'horizon.framework.util.q.extensions',
+      'horizon.app.core.openstack-service-api.policy'
+    ];
+  
+    /**
+     * @ngDoc factory
+     * @name horizon.app.core.images.actions.linkToApplianceCatalogService
+     * @param {Object} $q
+     * @param {Object} nonBootableImageTypes
+     * @param {Object} launchInstanceModal
+     * @param {Object} $qExtensions
+     * @Description
+     * Brings up the Launch Instance for image modal.
+     * On submit, launch the instance for the Image.
+     * On cancel, do nothing.
+     *
+     * @returns {Object} The service
+     */
+    function linkToApplianceCatalogService(
+      $q,
+      glance,
+      userSessionService,
+      nonBootableImageTypes,
+      launchInstanceModal,
+      $qExtensions
+    ) {
+      var service = {
+        perform: perform,
+        allowed: allowed
+      };
+      var modifyImagePolicyCheck, scope;
+  
+      return service;
+
+      function initScope($scope) {
+        scope = $scope;
+        $scope.$on(events.IMAGE_METADATA_CHANGED, onMetadataChange);
+        modifyImagePolicyCheck = policy.ifAllowed({rules: [['image', 'modify_image']]});
+      }
+
+      function allowed(image){
+        
+        return $q.all([
+            applianceCatalogEntryExists(image),
+            isActive(image)
+          ]);
+      }
+
+      //////////////
+  
+      function perform(image) {
+        // Previous uses of this relocated the display using the successUrl;
+        // in this case we leave the post-action behavior up to the result
+        // handler.
+        if(window.location.hostname.indexOf('dev.chameleon') > -1 || window.location.port != 443){
+          return window.open('https://dev.chameleon.tacc.utexas.edu/appliances/' + image.appliance_catalog_id);
+        } else {
+          return window.open('https://www.chameleoncloud.org/appliances/' + image.appliance_catalog_id);
+        }
+      }
+  
+      function isActive(image) {
+        return $qExtensions.booleanAsPromise(image.status === 'active');
+      }
+
+      function applianceCatalogEntryExists(image){
+        return $qExtensions.booleanAsPromise(image.appliance_catalog_id != -1);
+      }
+  
+      function isBootable(image) {
+        return $qExtensions.booleanAsPromise(
+          nonBootableImageTypes.indexOf(image.container_format) < 0
+        );
+      }
+  
+    } // end of linkToApplianceCatalogService
+  })(); // end of IIFE
+  
\ No newline at end of file
diff --git a/openstack_dashboard/static/app/core/images/actions/share-image.service.js b/openstack_dashboard/static/app/core/images/actions/share-image.service.js
index 82b9ea0..3a009a9 100644
--- a/openstack_dashboard/static/app/core/images/actions/share-image.service.js
+++ b/openstack_dashboard/static/app/core/images/actions/share-image.service.js
@@ -84,9 +84,11 @@
         //   'imageId': image.id
         // });
         console.log(image);
+        console.log(userSessionService.isCurrentProject(image.owner));
         var params = '?name=' + escape(image.name);
         params += '&short_description=' + escape(image.properties.description === undefined ? '' : image.properties.description);
         var region = getCookie('services_region');
+        //var region = userSessionService.get().then(function(userSession){return userSession.services_region;});
         if('region'.indexOf('@tacc') != -1){
           params += '&chi_tacc_appliance_id=' + escape(image.id);
         } else {
diff --git a/openstack_dashboard/static/app/core/images/images.module.js b/openstack_dashboard/static/app/core/images/images.module.js
index 3ea70b6..893a515 100644
--- a/openstack_dashboard/static/app/core/images/images.module.js
+++ b/openstack_dashboard/static/app/core/images/images.module.js
@@ -89,6 +89,10 @@
         sortDefault: true,
         urlFunction: imagesService.getDetailsPath
       })
+      // .append({
+      //   id: 'project_supported',
+      //   priority: 1
+      // })
       .append({
         id: 'type',
         priority: 1
@@ -123,6 +127,18 @@
         singleton: true,
         persistent: true
       })
+      // filtering by project supported not working yet, and it's not part of the requirements
+      // .append({
+      //   label: gettext('Project Supported'),
+      //   name: 'project_supported',
+      //   isServer: true,
+      //   singleton: true,
+      //   persistent: true,
+      //   options: [
+      //     {label: gettext('True'), key: 'true'},
+      //     {label: gettext('False'), key: 'false'}
+      //   ]
+      // })
       .append({
         label: gettext('Status'),
         name: 'status',
@@ -235,6 +251,7 @@
   function imageProperties(imagesService, statuses) {
     return {
       id: gettext('ID'),
+      project_supported: gettext('Project Supported'),
       checksum: gettext('Checksum'),
       members: gettext('Members'),
       min_disk: gettext('Min. Disk'),
-- 
1.8.3.1

