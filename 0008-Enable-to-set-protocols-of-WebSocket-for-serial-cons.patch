From f6f7bd40c1a0691abacaa19d94d6f8eabebf1aaa Mon Sep 17 00:00:00 2001
From: Shu Muto <shu-mutou@rf.jp.nec.com>
Date: Thu, 15 Jun 2017 18:06:47 +0900
Subject: [PATCH 08/29] Enable to set protocols of WebSocket for serial console

This patch enables to set protocols of WebSocket for serial console.
Also, this enables to use serial console not only from instance
but also plugins.
e.g. Zun UI can access container console provided by docker.

Change-Id: Ib0df9ddfc74f98bfea75abce3b5d5479e3cd47bd
Needed-By: I41f236f2762613e56748bb05eb7ce0e4c26158d2
Closes-Bug: #1698092
---
 .../templates/instances/serial_console.html        | 24 ----------------------
 .../dashboards/project/instances/views.py          |  8 ++++----
 .../static/js/angular/directives/serialConsole.js  | 18 ++++++++--------
 openstack_dashboard/templates/serial_console.html  | 24 ++++++++++++++++++++++
 4 files changed, 36 insertions(+), 38 deletions(-)
 delete mode 100644 openstack_dashboard/dashboards/project/instances/templates/instances/serial_console.html
 create mode 100644 openstack_dashboard/templates/serial_console.html

diff --git a/openstack_dashboard/dashboards/project/instances/templates/instances/serial_console.html b/openstack_dashboard/dashboards/project/instances/templates/instances/serial_console.html
deleted file mode 100644
index a852da5..0000000
--- a/openstack_dashboard/dashboards/project/instances/templates/instances/serial_console.html
+++ /dev/null
@@ -1,24 +0,0 @@
-{% load i18n %}
-<!DOCTYPE html>
-<html>
-<head>
-  <meta content='IE=edge' http-equiv='X-UA-Compatible' />
-  <meta content='text/html; charset=utf-8' http-equiv='Content-Type' />
-  <title>{{instance_name}} ({{instance_id}})</title>
-  <link rel="stylesheet" href="{{ STATIC_URL }}dashboard/scss/serial_console.css" type="text/css" media="screen">
-  <script src="{% url 'horizon:jsi18n' 'horizon' %}"></script>
-  <script src='{{ STATIC_URL }}horizon/lib/termjs/term.js'></script>
-  <script src="{{ STATIC_URL }}horizon/lib/jquery/jquery.js"></script>
-  <script src="{{ STATIC_URL }}horizon/lib/angular/angular.js"></script>
-  <script src="{{ STATIC_URL }}js/angular/directives/serialConsole.js"></script>
-</head>
-<body ng-app='serialConsoleApp'>
-
-    {% if error_message %}
-        {{ error_message }}
-    {% else %}
-        <serial-console connection='"{{console_url}}"'></serial-console>
-    {% endif %}
-
-</body>
-</html>
diff --git a/openstack_dashboard/dashboards/project/instances/views.py b/openstack_dashboard/dashboards/project/instances/views.py
index 844d607..044804a 100644
--- a/openstack_dashboard/dashboards/project/instances/views.py
+++ b/openstack_dashboard/dashboards/project/instances/views.py
@@ -212,11 +212,10 @@ def rdp(request, instance_id):
 
 
 class SerialConsoleView(generic.TemplateView):
-    template_name = 'project/instances/serial_console.html'
+    template_name = 'serial_console.html'
 
     def get_context_data(self, **kwargs):
         context = super(SerialConsoleView, self).get_context_data(**kwargs)
-        context['instance_id'] = self.kwargs['instance_id']
         instance = None
         try:
             instance = api.nova.server_get(self.request,
@@ -226,13 +225,14 @@ class SerialConsoleView(generic.TemplateView):
                 "Cannot find instance %s.") % self.kwargs['instance_id']
             # name is unknown, so leave it blank for the window title
             # in full-screen mode, so only the instance id is shown.
-            context['instance_name'] = ''
+            context['page_title'] = self.kwargs['instance_id']
             return context
-        context['instance_name'] = instance.name
+        context['page_title'] = "%s (%s)" % (instance.name, instance.id)
         try:
             console_url = project_console.get_console(self.request,
                                                       "SERIAL", instance)[1]
             context["console_url"] = console_url
+            context["protocols"] = "['binary', 'base64']"
         except exceptions.NotAvailable:
             context["error_message"] = _(
                 "Cannot get console for instance %s.") % self.kwargs[
diff --git a/openstack_dashboard/static/js/angular/directives/serialConsole.js b/openstack_dashboard/static/js/angular/directives/serialConsole.js
index e886aeb..8101e79 100644
--- a/openstack_dashboard/static/js/angular/directives/serialConsole.js
+++ b/openstack_dashboard/static/js/angular/directives/serialConsole.js
@@ -19,10 +19,6 @@ limitations under the License.
   'use strict';
 
   angular.module('serialConsoleApp', [])
-    .constant('protocols', [
-      'binary',
-      'base64'
-    ])
     .constant('states', [
       gettext('Connecting'),
       gettext('Open'),
@@ -36,16 +32,17 @@ limitations under the License.
      *
      * @description
      * The serial-console element creates a terminal based on the widely-used term.js.
-     * The "connection" attribute is input to a WebSocket object, which connects
-     * to a server. In Horizon, this directive is used to connect to nova-serialproxy,
-     * opening a serial console to any instance. Each key the user types is transmitted
-     * to the instance, and each character the instance reponds with is displayed.
+     * The "connection" and "protocols" attributes are input to a WebSocket object,
+     * which connects to a server. In Horizon, this directive is used to connect to
+     * nova-serialproxy, opening a serial console to any instance. Each key the user
+     * types is transmitted to the instance, and each character the instance reponds
+     * with is displayed.
      */
     .directive('serialConsole', serialConsole);
 
-  serialConsole.$inject = ['protocols', 'states'];
+  serialConsole.$inject = ['states'];
 
-  function serialConsole(protocols, states) {
+  function serialConsole(states) {
     return {
       scope: true,
       template: '<div id="terminalNode"></div><br>{{statusMessage()}}',
@@ -53,6 +50,7 @@ limitations under the License.
       link: function postLink(scope, element, attrs) {
 
         var connection = scope.$eval(attrs.connection);
+        var protocols = scope.$eval(attrs.protocols);
         var term = new Terminal();
         var socket = new WebSocket(connection, protocols);
 
diff --git a/openstack_dashboard/templates/serial_console.html b/openstack_dashboard/templates/serial_console.html
new file mode 100644
index 0000000..13c1fc5
--- /dev/null
+++ b/openstack_dashboard/templates/serial_console.html
@@ -0,0 +1,24 @@
+{% load i18n %}
+<!DOCTYPE html>
+<html>
+<head>
+  <meta content='IE=edge' http-equiv='X-UA-Compatible' />
+  <meta content='text/html; charset=utf-8' http-equiv='Content-Type' />
+  <title>{{page_title}}</title>
+  <link rel="stylesheet" href="{{ STATIC_URL }}dashboard/scss/serial_console.css" type="text/css" media="screen">
+  <script src="{% url 'horizon:jsi18n' 'horizon' %}"></script>
+  <script src='{{ STATIC_URL }}horizon/lib/termjs/term.js'></script>
+  <script src="{{ STATIC_URL }}horizon/lib/jquery/jquery.js"></script>
+  <script src="{{ STATIC_URL }}horizon/lib/angular/angular.js"></script>
+  <script src="{{ STATIC_URL }}js/angular/directives/serialConsole.js"></script>
+</head>
+<body ng-app='serialConsoleApp'>
+
+    {% if error_message %}
+        {{ error_message }}
+    {% else %}
+        <serial-console connection='"{{console_url}}"' protocols='{{protocols}}'></serial-console>
+    {% endif %}
+
+</body>
+</html>
-- 
1.8.3.1

